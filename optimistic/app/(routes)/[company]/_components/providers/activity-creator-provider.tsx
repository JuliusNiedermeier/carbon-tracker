import { Dispatch, FC, PropsWithChildren, SetStateAction, createContext, useContext, useState } from "react";
import { ActivityInsert, ActivityInsertSchema } from "@/app/_database/schema";
import { safeParse } from "valibot";
import { useCreateActivity } from "../../_hooks/use-create-activity";
import { columnMetadata } from "../../_columns";

export type ActivityCreatorContext = {
  candidate: Partial<ActivityInsert>;
  setCandidate: Dispatch<SetStateAction<Partial<ActivityInsert>>>;
  isValidCandidate: boolean;
  lockedColumns: string[];
  setLockedColumns: Dispatch<SetStateAction<string[]>>;
  createActivity: () => void;
};

const ActivityCreatorContext = createContext<ActivityCreatorContext | null>(null);

export const useActivityCreator = () => {
  const context = useContext(ActivityCreatorContext);
  if (!context) throw new Error("The hook useActivityCreator must be used inside the ActivityCreatorProvider.");
  return context;
};

export const ActivityCreatorProvider: FC<PropsWithChildren> = (props) => {
  const [candidate, setCandidate] = useState<Partial<ActivityInsert>>({});
  const [lockedColumns, setLockedColumns] = useState<string[]>([]);

  const { success: isValidCandidate } = safeParse(ActivityInsertSchema, candidate);

  // This check is only temporary.
  // Should be moved to the ActivityInsertSchema generated by drizzle-valibot instead.
  const isValidDescription = !!candidate.description && candidate.description.length >= 3;

  const createActivity = useCreateActivity();

  const createActivityInternal: ActivityCreatorContext["createActivity"] = () => {
    if (!isValidCandidate) return;

    createActivity(candidate as ActivityInsert);

    setCandidate((candidate) => {
      return columnMetadata
        .filter((meta) => lockedColumns.includes(meta.ID))
        .reduce((newCandidate, meta) => {
          if (!meta.dataUpdateKey) return newCandidate;
          return { ...newCandidate, [meta.dataUpdateKey]: candidate[meta.dataUpdateKey] };
        }, {} as typeof candidate);
    });
  };

  return (
    <ActivityCreatorContext.Provider
      value={{
        candidate,
        setCandidate,
        isValidCandidate: isValidCandidate && isValidDescription,
        lockedColumns,
        setLockedColumns,
        createActivity: createActivityInternal,
      }}
    >
      {props.children}
    </ActivityCreatorContext.Provider>
  );
};

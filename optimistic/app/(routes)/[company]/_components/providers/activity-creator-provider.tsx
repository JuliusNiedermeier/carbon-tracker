import { Dispatch, FC, PropsWithChildren, SetStateAction, createContext, useContext, useState } from "react";
import { ActivityInsert, ActivityInsertSchema } from "@/app/_database/schema";
import { safeParse } from "valibot";

export type ActivityCreatorContext = {
  candidate: Partial<ActivityInsert>;
  setCandidate: Dispatch<SetStateAction<Partial<ActivityInsert>>>;
  isValidCandidate: boolean;
};

const ActivityCreatorContext = createContext<ActivityCreatorContext | null>(null);

export const useActivityCreator = () => {
  const context = useContext(ActivityCreatorContext);
  if (!context) throw new Error("The hook useActivityCreator must be used inside the ActivityCreatorProvider.");
  return context;
};

export const ActivityCreatorProvider: FC<PropsWithChildren> = (props) => {
  const [candidate, setCandidate] = useState<Partial<ActivityInsert>>({ locationId: 0 });

  const { success: isValidCandidate } = safeParse(ActivityInsertSchema, candidate);

  // This check is only temporary.
  // Should be moved to the ActivityInsertSchema generated by drizzle-valibot instead.
  const isValidDescription = !!candidate.description && candidate.description.length >= 3;

  return (
    <ActivityCreatorContext.Provider value={{ candidate, setCandidate, isValidCandidate: isValidCandidate && isValidDescription }}>
      {props.children}
    </ActivityCreatorContext.Provider>
  );
};
